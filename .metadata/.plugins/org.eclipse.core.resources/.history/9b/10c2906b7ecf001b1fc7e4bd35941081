package com.nashtechglobal.service;

import com.nashtechglobal.datamodel.Post;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostService {
    public List<Post> findByPredicate(List<Post> posts, IPredicate<Post> postPredicate) {
        List<Post> postList = new ArrayList<>();
        for (Post post : posts) {
            if (postPredicate.test(post)) {
                postList.add(post);
            }
        }
        return postList;
    }

    public List<Post> findByUsername(List<Post> posts, String username) {
        return findByPredicate(posts, post -> post.getAuthor().equals(username));
    }

    public List<Post> findByKeyword(List<Post> posts, String keyword) {
        return findByPredicate(posts, post -> post.getTitle().contains(keyword) || post.getContent().contains(keyword));
    }

    public List<Post> findTop10NewestPostsByUsername(List<Post> posts, String username) {
        List<Post> postsByUsername = findByUsername(posts, username);

        postsByUsername.sort((Post post1, Post post2) -> compareDate(post1.getDate(), post2.getDate()));

        if (postsByUsername.size() < 10) {
        	return postsByUsername;
        }
        return postsByUsername.subList(0, 10);
    }

    public List<Post> find10NewestPostsByUsernameAndKeyword(List<Post> posts, String username, String keyword) {
        List<Post> postsByUsername = findByUsername(posts, username);
        List<Post> postsByKeyword = findByKeyword(postsByUsername, keyword);
        postsByKeyword.sort((Post post1, Post post2) -> compareDate(post1.getDate(), post2.getDate()));
        
        if 
        return postsByKeyword.subList(0, 10);
    }

    public Map<String, List<Post>> findUserPostMap(List<Post> ports) {
        Map<String, List<Post>> userPostMap = new HashMap<>();
        for (Post post : ports) {
            String username = post.getAuthor();

            if (userPostMap.containsKey(username)) {
                userPostMap.get(username).add(post);
            } else {
                List<Post> newPosts = new ArrayList<>();
                newPosts.add(post);
                userPostMap.put(username, newPosts);
            }
        }
        return userPostMap;
    }

    private int compareDate(LocalDate date1, LocalDate date2) {
        if (date1.isAfter(date2)) {
            return 1;
        } else if (date1.isBefore(date2)) {
            return -1;
        }
        return 0;
    }
}
